name: Deploy App Cobranzas.

# Trigger.
on:
  push:
    branches:
      - cobranzas_qa_am

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Variables de entorno.
    env:
      #Conexion ssh
      SSH_PRIVATE_KEY: ${{ secrets.PEM_COBRANZAS_QA }}
      REMOTE_USER: ec2-user
      REMOTE_HOST: ${{ secrets.IP_COBRANZAS_QA }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GH_AM }}
      APP_NAME: app.js
      #Conexion dockerhub
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME_AM }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN_AM }}
      DOCKERHUB_PASSWORD:  ${{ secrets.DOCKERHUB_PASSWORD_AM }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install packages Nodejs Npm Git
      - name: Install Packages
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo yum update -y
            sudo yum install nodejs npm git -y

      # Create a Directory.
      - name: Create a Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo rm -rf /opt/cobranzas_qa || true
            cd /opt
            sudo mkdir -p cobranzas_qa

      # Execute git clone.
      - name: Clone repository
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cobranzas_qa
            sudo git clone -b cobranzas_qa_am https://github.com/alkemyTech/UMSA-DevOps-T1.git /opt/cobranzas_qa

      # Install npm packages express pm2.
      - name: Install npm packages
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cobranzas_qa
            sudo npm install -g express pm2

      # Start service
      - name: Start Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cobranzas_qa
            sudo pm2 delete app.js || true
            sudo pm2 start app.js --name 'app.js'

      # Check if app is running
      - name: Check if app is running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            # if sudo pm2 status | grep -q  '${{ env.APP_NAME }}'; then --> otra opción
            if sudo pm2 ls | grep -q  '${{ env.APP_NAME }}'; then
              echo "El servicio ${{ env.APP_NAME }} está en ejecución."
            else
              echo "El servicio ${{ env.APP_NAME }} no está en ejecución."
              exit 1
            fi
     
      - name: SSH into EC2 instance and run Docker commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo yum update -y
            sudo yum install docker -y
            sudo systemctl start docker
            sudo systemctl enable docker

            sudo usermod -aG wheel ec2-user 

      - name: Generar Imagen Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            # Generar el contenido del Dockerfile
            echo "FROM node:14" > Dockerfile
            echo "" >> Dockerfile
            echo "WORKDIR /app" >> Dockerfile
            echo "" >> Dockerfile
            echo "COPY /opt/cobranzas_qa/package.json ." >> Dockerfile
            echo "COPY /opt/cobranzas_qa/package-lock.json ." >> Dockerfile
            echo "" >> Dockerfile
            echo "RUN npm install" >> Dockerfile
            echo "" >> Dockerfile
            echo "COPY . ." >> Dockerfile
            echo "" >> Dockerfile
            echo "EXPOSE 8080" >> Dockerfile
            echo "" >> Dockerfile
            echo 'CMD ["node", "app.js"]' >> Dockerfile

            # Construir la imagen Docker
            docker build -t cobranzas_qa:v1 .

            # Detener y eliminar el contenedor existente si existe
            docker stop cont_cobranzas_qa || true
            docker rm cont_cobranzas_qa || true

            # Ejecutar el contenedor
            docker run -d --name cont_cobranzas_qa cobranzas_qa:v1

      - name: Iniciar sesión en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Subir a DockerHub
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/cobranzas_qa:v1
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Detener y eliminar contenedor existente (si existe)
        run: |
          docker stop cobranzas_qa || true
          docker rm cobranzas_qa || true

      - name: Ejecutar nuevo contenedor con la imagen recién descargada
        run: |
          docker run -d --name cobranzas_qa -p 8080:8080 agusmiloro/cobranzas_qa:v1 
