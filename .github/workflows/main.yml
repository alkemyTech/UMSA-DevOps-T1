name: Deploy App Cobranzas

# Trigger.
on:
  push:
    branches:
      - cobranzas_qa_am

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.PEM_COBRANZAS_QA }}
      REMOTE_USER: ec2-user
      REMOTE_HOST: ${{ secrets.IP_COBRANZAS_QA }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GH_AM }}
      APP_NAME: app.js
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME_COBRANZAS_QA }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN_COBRANZAS_QA }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD_AM }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Instalación de paquetes Node.js, npm y Git
      - name: Install Packages
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo yum update -y
            sudo yum install nodejs npm git -y

      # Crear un directorio
      - name: Create a Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo rm -rf /opt/cobranzas_qa || true
            cd /opt
            sudo mkdir -p cobranzas_qa

      # Clonar el repositorio Git
      - name: Clone repository
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cobranzas_qa
            sudo git clone -b cobranzas_qa_am https://github.com/alkemyTech/UMSA-DevOps-T1.git /opt/cobranzas_qa

      # Instalar paquetes npm express pm2
      - name: Install npm packages
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cobranzas_qa
            sudo npm install -g express pm2

      # Iniciar servicio
      - name: Start Service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/cobranzas_qa
            sudo pm2 delete app.js || true
            sudo pm2 start app.js --name 'app.js'

      # Verificar si la aplicación está en ejecución
      - name: Check if app is running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            if sudo pm2 ls | grep -q  '${{ env.APP_NAME }}'; then
              echo "El servicio ${{ env.APP_NAME }} está en ejecución."
            else
              echo "El servicio ${{ env.APP_NAME }} no está en ejecución."
              exit 1
            fi

      # Instalar Docker
      - name: Install Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            sudo yum update -y
            sudo yum install docker -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            sudo usermod -aG docker ec2-user

      # Copiar archivos desde la máquina remota al host local
      - name: Copy files from remote machine
        run: scp -r -i ${{ env.SSH_PRIVATE_KEY }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:/opt/cobranzas_qa /tmp/cobranzas_qa

      # Construir la imagen Docker utilizando los archivos copiados
      - name: Build Docker Image
        uses: docker/build-push-action@v5.3.0
        with:
          context: /tmp/cobranzas_qa
          file: Dockerfile
          push: false
          tags: ${{ env.DOCKERHUB_USERNAME }}/cobranzas_qa:latest

      # Eliminar los archivos copiados después de construir la imagen
      - name: Remove temporary files
        run: rm -rf /tmp/cobranzas_qa

      # Iniciar sesión en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      # Subir imagen a Docker Hub
      - name: Push Docker Image to Docker Hub
        uses: docker/build-push-action@v5.3.0
        with:
          context: /tmp/cobranzas_qa
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/cobranzas_qa:latest
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
